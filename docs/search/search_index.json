{"config":{"indexing":"full","lang":["en"],"min_search_length":2,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sendanor \u00b6 This website provides documentation for our products: Sendanor Form Sendanor Pipeline Sendanor Chat Sendanor Live","title":"Home"},{"location":"#sendanor","text":"This website provides documentation for our products: Sendanor Form Sendanor Pipeline Sendanor Chat Sendanor Live","title":"Sendanor"},{"location":"about/","text":"We're a software & hosting company from Finland \u00b6 We provide commercial custom software as turn-key solutions for our customers. Our speciality is a quality development using ReactJS , NodeJS and TypeScript and deep knowledge of the hosting world. We also believe in open source and most of our components are available from Github with a MIT license. You can reach us my email info@sendanor.com .","title":"About Us"},{"location":"about/#were-a-software-hosting-company-from-finland","text":"We provide commercial custom software as turn-key solutions for our customers. Our speciality is a quality development using ReactJS , NodeJS and TypeScript and deep knowledge of the hosting world. We also believe in open source and most of our components are available from Github with a MIT license. You can reach us my email info@sendanor.com .","title":"We're a software &amp; hosting company from Finland"},{"location":"roadmap/","text":"Roadmap \u00b6 Things we are looking forward to: Translation support. We'll include a full user interface to create and modify translations. Theme support. Our components should support multiple themes (eg. dark and light themes) Style editor. Our components should allow custom styles User support in created apps. Support to require user identity to use forms created by our software. Improved user management. We're planning to add Organizations and complete multi-user environment in the UI. Backend support. Design your own backend APIs in the UI and configure to execute Pipelines . YAML support. Our pipelines could support YAML format.","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"Things we are looking forward to: Translation support. We'll include a full user interface to create and modify translations. Theme support. Our components should support multiple themes (eg. dark and light themes) Style editor. Our components should allow custom styles User support in created apps. Support to require user identity to use forms created by our software. Improved user management. We're planning to add Organizations and complete multi-user environment in the UI. Backend support. Design your own backend APIs in the UI and configure to execute Pipelines . YAML support. Our pipelines could support YAML format.","title":"Roadmap"},{"location":"chat/","text":"Getting Started with Sendanor Chat \u00b6 Our Chat software can be used to embed interactive chat on any website. The chat can be integrated to third party services like Discord, IRC, or Matrix network -- and can also operate as a pure web chat, independently of these networks. The chat app is available at viesti.app . Screenshots \u00b6 Login view \u00b6 End-users do not need to register to use the chat. Light theme Dark theme Chat view \u00b6 Light theme Dark theme","title":"Getting Started with Chat"},{"location":"chat/#getting-started-with-sendanor-chat","text":"Our Chat software can be used to embed interactive chat on any website. The chat can be integrated to third party services like Discord, IRC, or Matrix network -- and can also operate as a pure web chat, independently of these networks. The chat app is available at viesti.app .","title":"Getting Started with Sendanor Chat"},{"location":"chat/#screenshots","text":"","title":"Screenshots"},{"location":"chat/#login-view","text":"End-users do not need to register to use the chat. Light theme Dark theme","title":"Login view"},{"location":"chat/#chat-view","text":"Light theme Dark theme","title":"Chat view"},{"location":"forms/","text":"Getting Started with Sendanor Forms \u00b6 Our Form software can be used to create interactive user interfaces on web. These web apps can be embedded on any website -- including static HTML sites. Results can be processed using our Pipeline software . The form app is available at lomake.app . To request an account, contact our sales .","title":"Getting Started with Forms"},{"location":"forms/#getting-started-with-sendanor-forms","text":"Our Form software can be used to create interactive user interfaces on web. These web apps can be embedded on any website -- including static HTML sites. Results can be processed using our Pipeline software . The form app is available at lomake.app . To request an account, contact our sales .","title":"Getting Started with Sendanor Forms"},{"location":"forms/configuring-pipeline/","text":"Setting up a pipeline for the form \u00b6 The Pipeline tab defines how to handle the form input using our Pipeline environment . Select which Pipeline you want to use Select which Agent pool to use Configure pipeline parameters (if the pipeline has any) Configuring pipeline parameters \u00b6 From the Parameters section you can map how fields are connected to pipeline parameters. Field connections can be indicated as: The value Summary @ The all fields as a JSON object @my_password Map to a field by keyword my_password @user.email Map to a property email of the user object Constant values can be indicated as a JSON value with a leading = character: The value Summary =\"The text\" String =false or =true Boolean =123 Number ={\"foo\":\"bar\"} Object =[\"a\", \"b\", \"c\"] Array =null Null","title":"Configuring a pipeline"},{"location":"forms/configuring-pipeline/#setting-up-a-pipeline-for-the-form","text":"The Pipeline tab defines how to handle the form input using our Pipeline environment . Select which Pipeline you want to use Select which Agent pool to use Configure pipeline parameters (if the pipeline has any)","title":"Setting up a pipeline for the form"},{"location":"forms/configuring-pipeline/#configuring-pipeline-parameters","text":"From the Parameters section you can map how fields are connected to pipeline parameters. Field connections can be indicated as: The value Summary @ The all fields as a JSON object @my_password Map to a field by keyword my_password @user.email Map to a property email of the user object Constant values can be indicated as a JSON value with a leading = character: The value Summary =\"The text\" String =false or =true Boolean =123 Number ={\"foo\":\"bar\"} Object =[\"a\", \"b\", \"c\"] Array =null Null","title":"Configuring pipeline parameters"},{"location":"forms/creating-form/","text":"Setting up a form \u00b6 To create a form, click the Add new form button. Once created, you can edit it by clicking the Edit button.","title":"Setting up a form"},{"location":"forms/creating-form/#setting-up-a-form","text":"To create a form, click the Add new form button. Once created, you can edit it by clicking the Edit button.","title":"Setting up a form"},{"location":"forms/editing-form/","text":"Editing a form \u00b6 From here you can set the title and add items to your form. On the right side you can see the preview of how the form will look. Changing button labels \u00b6 You can add items to the form by clicking the plus icon next to the page title. Cancel button label Click the Plus icon Select option the Cancel button label Modify the Cancel button label Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend Submit button label Click the Plus icon Select option the Submit button label Modify the Submit button label Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend Next page button label Click the Plus icon Select option Page break Click the edit icon next to the new page-break item Click the plus icon on the Page break edit modal and select the Next button label option Modify the Next button label Close the modal Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend Back button label Click the Plus icon Select option Page break Click the edit icon next to the new page-break item Click the plus icon on the Page break edit modal and select the Next button label option Modify the Next button label Close the modal Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend Adding text field \u00b6 Preview view The field can be added from the Plus action menu next to the page title. The text field is intended for a text content. You can see the preview on the right side of the editor. Modify the field Click the Edit icon next to the field you want to edit If not already activated, you can add features from the action menu ( the Plus icon) Modify the field Close the modal Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend Adding password field \u00b6 Preview view The field can be added from the Plus action menu next to the page title. The password field is intended for a secret text content. You can see the preview on the right side of the editor. Modify the field Click the Edit icon next to the field you want to edit If not already activated, you can add features from the action menu ( the Plus icon) Modify the field Close the modal Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend Adding email field \u00b6 Preview view The field can be added from the Plus action menu next to the page title. The email field is intended for a email addresses. You can see the preview on the right side of the editor. Modify the field Click the Edit icon next to the field you want to edit If not already activated, you can add features from the action menu ( the Plus icon) Modify the field Close the modal Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend Adding text area field \u00b6 Preview view The field can be added from the Plus action menu next to the page title. The text area field is intended for a multi line content. You can see the preview on the right side of the editor. Modify the field Click the Edit icon next to the field you want to edit If not already activated, you can add features from the action menu ( the Plus icon) Modify the field Close the modal Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend Adding integer field \u00b6 Preview view The field can be added from the Plus action menu next to the page title. The integer field is intended for integer numbers. You can see the preview on the right side of the editor. Modify the field Click the Edit icon next to the field you want to edit If not already activated, you can add features from the action menu ( the Plus icon) Modify the field Close the modal Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend Adding checkbox field \u00b6 Preview view The field can be added from the Plus action menu next to the page title. The checkbox field is intended for boolean values. You can see the preview on the right side of the editor. Modify the field Click the Edit icon next to the field you want to edit If not already activated, you can add features from the action menu ( the Plus icon) Modify the field Close the modal Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend Adding select field \u00b6 Preview view The field can be added from the Plus action menu next to the page title. The select field is intended for selecting from multiple options. You can see the preview on the right side of the editor. Modify the field Click the Edit icon next to the field you want to edit If not already activated, you can add features from the action menu ( the Plus icon) Modify the field Close the modal Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend Adding slider field \u00b6 Preview view The field can be added from the Plus action menu next to the page title. The slider field is intended for selecting from multiple options. You can see the preview on the right side of the editor. Modify the field Click the Edit icon next to the field you want to edit If not already activated, you can add features from the action menu ( the Plus icon) Modify the field Close the modal Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend Adding multiple pages \u00b6 Preview The page break is intended to break the form into multiple pages. You can see the preview on the right side of the editor. You can test other pages by clicking the form's Next and Back buttons. Modify page button labels Click the Edit icon next to the page break you want to edit If not already activated, you can add features from the action menu ( the Plus icon) Modify the labels Close the modal Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend","title":"Editing a form"},{"location":"forms/editing-form/#editing-a-form","text":"From here you can set the title and add items to your form. On the right side you can see the preview of how the form will look.","title":"Editing a form"},{"location":"forms/editing-form/#changing-button-labels","text":"You can add items to the form by clicking the plus icon next to the page title. Cancel button label Click the Plus icon Select option the Cancel button label Modify the Cancel button label Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend Submit button label Click the Plus icon Select option the Submit button label Modify the Submit button label Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend Next page button label Click the Plus icon Select option Page break Click the edit icon next to the new page-break item Click the plus icon on the Page break edit modal and select the Next button label option Modify the Next button label Close the modal Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend Back button label Click the Plus icon Select option Page break Click the edit icon next to the new page-break item Click the plus icon on the Page break edit modal and select the Next button label option Modify the Next button label Close the modal Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend","title":"Changing button labels"},{"location":"forms/editing-form/#adding-text-field","text":"Preview view The field can be added from the Plus action menu next to the page title. The text field is intended for a text content. You can see the preview on the right side of the editor. Modify the field Click the Edit icon next to the field you want to edit If not already activated, you can add features from the action menu ( the Plus icon) Modify the field Close the modal Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend","title":"Adding text field"},{"location":"forms/editing-form/#adding-password-field","text":"Preview view The field can be added from the Plus action menu next to the page title. The password field is intended for a secret text content. You can see the preview on the right side of the editor. Modify the field Click the Edit icon next to the field you want to edit If not already activated, you can add features from the action menu ( the Plus icon) Modify the field Close the modal Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend","title":"Adding password field"},{"location":"forms/editing-form/#adding-email-field","text":"Preview view The field can be added from the Plus action menu next to the page title. The email field is intended for a email addresses. You can see the preview on the right side of the editor. Modify the field Click the Edit icon next to the field you want to edit If not already activated, you can add features from the action menu ( the Plus icon) Modify the field Close the modal Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend","title":"Adding email field"},{"location":"forms/editing-form/#adding-text-area-field","text":"Preview view The field can be added from the Plus action menu next to the page title. The text area field is intended for a multi line content. You can see the preview on the right side of the editor. Modify the field Click the Edit icon next to the field you want to edit If not already activated, you can add features from the action menu ( the Plus icon) Modify the field Close the modal Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend","title":"Adding text area field"},{"location":"forms/editing-form/#adding-integer-field","text":"Preview view The field can be added from the Plus action menu next to the page title. The integer field is intended for integer numbers. You can see the preview on the right side of the editor. Modify the field Click the Edit icon next to the field you want to edit If not already activated, you can add features from the action menu ( the Plus icon) Modify the field Close the modal Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend","title":"Adding integer field"},{"location":"forms/editing-form/#adding-checkbox-field","text":"Preview view The field can be added from the Plus action menu next to the page title. The checkbox field is intended for boolean values. You can see the preview on the right side of the editor. Modify the field Click the Edit icon next to the field you want to edit If not already activated, you can add features from the action menu ( the Plus icon) Modify the field Close the modal Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend","title":"Adding checkbox field"},{"location":"forms/editing-form/#adding-select-field","text":"Preview view The field can be added from the Plus action menu next to the page title. The select field is intended for selecting from multiple options. You can see the preview on the right side of the editor. Modify the field Click the Edit icon next to the field you want to edit If not already activated, you can add features from the action menu ( the Plus icon) Modify the field Close the modal Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend","title":"Adding select field"},{"location":"forms/editing-form/#adding-slider-field","text":"Preview view The field can be added from the Plus action menu next to the page title. The slider field is intended for selecting from multiple options. You can see the preview on the right side of the editor. Modify the field Click the Edit icon next to the field you want to edit If not already activated, you can add features from the action menu ( the Plus icon) Modify the field Close the modal Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend","title":"Adding slider field"},{"location":"forms/editing-form/#adding-multiple-pages","text":"Preview The page break is intended to break the form into multiple pages. You can see the preview on the right side of the editor. You can test other pages by clicking the form's Next and Back buttons. Modify page button labels Click the Edit icon next to the page break you want to edit If not already activated, you can add features from the action menu ( the Plus icon) Modify the labels Close the modal Once you're happy with your changes, click the Save button in the bottom panel to save your changes to the backend","title":"Adding multiple pages"},{"location":"forms/examples/commenting-on-blog/","text":"Commenting on static website \u00b6 We embedded commenting on a static web page at thejhh.me . The website is built using Jekyll and Github Pages . New comments are processed by our Pipeline software with a custom pipeline which adds the comment to our Jekyll's _data folder in Git repository. Note! The comment will not be added on the page instantly because of a delay on the Github side. However, our agent will start processing the pipeline instantly.","title":"Examples"},{"location":"forms/examples/commenting-on-blog/#commenting-on-static-website","text":"We embedded commenting on a static web page at thejhh.me . The website is built using Jekyll and Github Pages . New comments are processed by our Pipeline software with a custom pipeline which adds the comment to our Jekyll's _data folder in Git repository. Note! The comment will not be added on the page instantly because of a delay on the Github side. However, our agent will start processing the pipeline instantly.","title":"Commenting on static website"},{"location":"live/","text":"Getting Started with Sendanor Live \u00b6 Our Live software can be used to publish professional live high quality audio and video streaming on the web. The streaming app can be embedded on any website. It can also be integrated to use our Chat software for effortless end-user experience.","title":"Getting Started with Live"},{"location":"live/#getting-started-with-sendanor-live","text":"Our Live software can be used to publish professional live high quality audio and video streaming on the web. The streaming app can be embedded on any website. It can also be integrated to use our Chat software for effortless end-user experience.","title":"Getting Started with Sendanor Live"},{"location":"pipelines/","text":"Getting started with Sendanor Pipelines \u00b6 Our Pipeline software can be used to execute action scripts (called pipelines ) to process data on demand. It supports a model where pipelines can be organized as reusable components and mapped to process data from different sources and places. For example, our Forms software can be used to bind fields to specific pipeline parameters.","title":"Getting Started with Pipelines"},{"location":"pipelines/#getting-started-with-sendanor-pipelines","text":"Our Pipeline software can be used to execute action scripts (called pipelines ) to process data on demand. It supports a model where pipelines can be organized as reusable components and mapped to process data from different sources and places. For example, our Forms software can be used to bind fields to specific pipeline parameters.","title":"Getting started with Sendanor Pipelines"},{"location":"pipelines/agent/","text":"Pipeline Agents and Pools \u00b6 The Pipeline Agent is an instance of the Pipeline Runner software -- using a special service account -- to process work on demand. As our commercial customer we can set up the agent environment for you. Setting up the Agent Pool \u00b6 Before you can set up an agent, you'll need to create at least one Agent Pool . It is a room where agents can look up and wait for work to become available. To create Agent pool you can click the Create pool button and a new pool is added to the list in a moment. Setting up the Agent \u00b6 From the Agent View new agents can be added to the pool. When an agent is created, you will receive an Access Token from the UI. This token is displayed only once and should be saved and kept secret . You will need it later to configure the Pipeline Runner . From here you can also rename or delete the pool.","title":"Pipeline Agents"},{"location":"pipelines/agent/#pipeline-agents-and-pools","text":"The Pipeline Agent is an instance of the Pipeline Runner software -- using a special service account -- to process work on demand. As our commercial customer we can set up the agent environment for you.","title":"Pipeline Agents and Pools"},{"location":"pipelines/agent/#setting-up-the-agent-pool","text":"Before you can set up an agent, you'll need to create at least one Agent Pool . It is a room where agents can look up and wait for work to become available. To create Agent pool you can click the Create pool button and a new pool is added to the list in a moment.","title":"Setting up the Agent Pool"},{"location":"pipelines/agent/#setting-up-the-agent","text":"From the Agent View new agents can be added to the pool. When an agent is created, you will receive an Access Token from the UI. This token is displayed only once and should be saved and kept secret . You will need it later to configure the Pipeline Runner . From here you can also rename or delete the pool.","title":"Setting up the Agent"},{"location":"pipelines/model/","text":"Pipeline model \u00b6 We have four types of pipeline models: Pipeline defines one or more stages to be executed in the same order as they are defined Stage defines one or more jobs to be executed in parallel at the same time Job defines one or more steps to be executed in the same order as they are defined Step defines a work item to execute","title":"Getting started with models"},{"location":"pipelines/model/#pipeline-model","text":"We have four types of pipeline models: Pipeline defines one or more stages to be executed in the same order as they are defined Stage defines one or more jobs to be executed in parallel at the same time Job defines one or more steps to be executed in the same order as they are defined Step defines a work item to execute","title":"Pipeline model"},{"location":"pipelines/model/job/","text":"The Job model \u00b6 Job defines one or more steps to be executed in the same order as they are defined. The next step will be started once the previous has been finished successfully. Otherwise, if step fails, it will not continue and the job is marked as failed. Example { \"name\" : \"My_job\" , \"steps\" : [ { \"name\" : \"Print_date\" , \"command\" : \"date\" } ] } Properties Property Type Summary name string The name of the job steps Step[] One or more steps parameters ParameterModel[] Optional pipeline parameters variables JsonObject Optional pipeline variables TypeScript interface interface Job { readonly name : string ; readonly steps : readonly Step []; readonly parameters ? : ParameterModel [] | undefined ; readonly variables ? : ReadonlyJsonObject | undefined ; }","title":"Job"},{"location":"pipelines/model/job/#the-job-model","text":"Job defines one or more steps to be executed in the same order as they are defined. The next step will be started once the previous has been finished successfully. Otherwise, if step fails, it will not continue and the job is marked as failed. Example { \"name\" : \"My_job\" , \"steps\" : [ { \"name\" : \"Print_date\" , \"command\" : \"date\" } ] } Properties Property Type Summary name string The name of the job steps Step[] One or more steps parameters ParameterModel[] Optional pipeline parameters variables JsonObject Optional pipeline variables TypeScript interface interface Job { readonly name : string ; readonly steps : readonly Step []; readonly parameters ? : ParameterModel [] | undefined ; readonly variables ? : ReadonlyJsonObject | undefined ; }","title":"The Job model"},{"location":"pipelines/model/parameters/","text":"Pipeline parameters \u00b6 Any pipeline model can define input parameters from the outside, eg. forms . String { \"parameters\" : [ { \"type\" : \"string\" , \"name\" : \"format\" , \"displayName\" : \"Date Format\" , \"default\" : \"%s\" } ], \"name\" : \"Print_date_with_params\" , \"command\" : \"date\" , \"args\" : [ \"+${{format}}\" ] } This pipeline defines one optional input parameter named format which must be a string. Number { \"parameters\" : [ { \"type\" : \"number\" , \"name\" : \"value\" , \"displayName\" : \"Input value\" , \"default\" : 123.456 } ], \"name\" : \"Print_value\" , \"command\" : \"echo\" , \"args\" : [ \"${{value}}\" ] } This pipeline defines one optional input parameter named value which must be a number. Integer { \"parameters\" : [ { \"type\" : \"integer\" , \"name\" : \"value\" , \"displayName\" : \"Input value\" , \"default\" : 123 } ], \"name\" : \"Print_value\" , \"command\" : \"echo\" , \"args\" : [ \"${{value}}\" ] } This pipeline defines one optional input parameter named value which must be a integer. Boolean { \"parameters\" : [ { \"type\" : \"boolean\" , \"name\" : \"value\" , \"displayName\" : \"Input value\" , \"default\" : false } ], \"name\" : \"Print_value\" , \"command\" : \"echo\" , \"args\" : [ \"${{value}}\" ] } This pipeline defines one optional input parameter named value which must be a boolean. JSON { \"parameters\" : [ { \"type\" : \"json\" , \"name\" : \"items\" , \"displayName\" : \"Input value\" , \"default\" : [ \"foo\" , \"bar\" ] } ], \"name\" : \"Print_value\" , \"command\" : \"echo\" , \"args\" : \"${{items}}\" } This pipeline defines one optional input parameter named items which must be valid JSON. The parameter must be referenced as ${{NAME}} because parameters are compiled before the pipeline is started, and so do not exist anymore while the pipeline is executing.","title":"Parameters"},{"location":"pipelines/model/parameters/#pipeline-parameters","text":"Any pipeline model can define input parameters from the outside, eg. forms . String { \"parameters\" : [ { \"type\" : \"string\" , \"name\" : \"format\" , \"displayName\" : \"Date Format\" , \"default\" : \"%s\" } ], \"name\" : \"Print_date_with_params\" , \"command\" : \"date\" , \"args\" : [ \"+${{format}}\" ] } This pipeline defines one optional input parameter named format which must be a string. Number { \"parameters\" : [ { \"type\" : \"number\" , \"name\" : \"value\" , \"displayName\" : \"Input value\" , \"default\" : 123.456 } ], \"name\" : \"Print_value\" , \"command\" : \"echo\" , \"args\" : [ \"${{value}}\" ] } This pipeline defines one optional input parameter named value which must be a number. Integer { \"parameters\" : [ { \"type\" : \"integer\" , \"name\" : \"value\" , \"displayName\" : \"Input value\" , \"default\" : 123 } ], \"name\" : \"Print_value\" , \"command\" : \"echo\" , \"args\" : [ \"${{value}}\" ] } This pipeline defines one optional input parameter named value which must be a integer. Boolean { \"parameters\" : [ { \"type\" : \"boolean\" , \"name\" : \"value\" , \"displayName\" : \"Input value\" , \"default\" : false } ], \"name\" : \"Print_value\" , \"command\" : \"echo\" , \"args\" : [ \"${{value}}\" ] } This pipeline defines one optional input parameter named value which must be a boolean. JSON { \"parameters\" : [ { \"type\" : \"json\" , \"name\" : \"items\" , \"displayName\" : \"Input value\" , \"default\" : [ \"foo\" , \"bar\" ] } ], \"name\" : \"Print_value\" , \"command\" : \"echo\" , \"args\" : \"${{items}}\" } This pipeline defines one optional input parameter named items which must be valid JSON. The parameter must be referenced as ${{NAME}} because parameters are compiled before the pipeline is started, and so do not exist anymore while the pipeline is executing.","title":"Pipeline parameters"},{"location":"pipelines/model/pipeline/","text":"The Pipeline model \u00b6 Pipeline defines one or more stages to be executed in the same order as they are defined. The next stage will be started once the previous has been finished successfully. Otherwise, when a stage fails, it will not continue to the next one. Example { \"name\" : \"My_pipeline\" , \"stages\" : [ { \"name\" : \"My_stage\" , \"jobs\" : [ { \"name\" : \"My_job\" , \"steps\" : [ { \"name\" : \"Print_date\" , \"command\" : \"date\" } ] } ] } ] } Properties Property Type Summary name string The name of the pipeline stages Stage[] One or more stages parameters ParameterModel[] Optional pipeline parameters variables JsonObject Optional pipeline variables TypeScript interface interface Pipeline { readonly name : string ; readonly stages : readonly Stage []; readonly parameters ? : ParameterModel [] | undefined ; readonly variables ? : ReadonlyJsonObject | undefined ; }","title":"Pipeline"},{"location":"pipelines/model/pipeline/#the-pipeline-model","text":"Pipeline defines one or more stages to be executed in the same order as they are defined. The next stage will be started once the previous has been finished successfully. Otherwise, when a stage fails, it will not continue to the next one. Example { \"name\" : \"My_pipeline\" , \"stages\" : [ { \"name\" : \"My_stage\" , \"jobs\" : [ { \"name\" : \"My_job\" , \"steps\" : [ { \"name\" : \"Print_date\" , \"command\" : \"date\" } ] } ] } ] } Properties Property Type Summary name string The name of the pipeline stages Stage[] One or more stages parameters ParameterModel[] Optional pipeline parameters variables JsonObject Optional pipeline variables TypeScript interface interface Pipeline { readonly name : string ; readonly stages : readonly Stage []; readonly parameters ? : ParameterModel [] | undefined ; readonly variables ? : ReadonlyJsonObject | undefined ; }","title":"The Pipeline model"},{"location":"pipelines/model/stage/","text":"The Stage model \u00b6 Stage defines one or more jobs to be executed in parallel at the same time. The stage is marked as finished once every job is done successfully. Otherwise, if any job fails, the stage will be marked as failed. Example { \"name\" : \"My_stage\" , \"jobs\" : [ { \"name\" : \"My_job\" , \"steps\" : [ { \"name\" : \"Print_date\" , \"command\" : \"date\" } ] } ] } Properties Property Type Summary name string The name of the stage jobs Job[] One or more jobs parameters ParameterModel[] Optional pipeline parameters variables JsonObject Optional pipeline variables TypeScript interface interface Stage { readonly name : string ; readonly jobs : readonly Job []; readonly parameters ? : ParameterModel [] | undefined ; readonly variables ? : ReadonlyJsonObject | undefined ; }","title":"Stage"},{"location":"pipelines/model/stage/#the-stage-model","text":"Stage defines one or more jobs to be executed in parallel at the same time. The stage is marked as finished once every job is done successfully. Otherwise, if any job fails, the stage will be marked as failed. Example { \"name\" : \"My_stage\" , \"jobs\" : [ { \"name\" : \"My_job\" , \"steps\" : [ { \"name\" : \"Print_date\" , \"command\" : \"date\" } ] } ] } Properties Property Type Summary name string The name of the stage jobs Job[] One or more jobs parameters ParameterModel[] Optional pipeline parameters variables JsonObject Optional pipeline variables TypeScript interface interface Stage { readonly name : string ; readonly jobs : readonly Job []; readonly parameters ? : ParameterModel [] | undefined ; readonly variables ? : ReadonlyJsonObject | undefined ; }","title":"The Stage model"},{"location":"pipelines/model/variables/","text":"Pipeline variables \u00b6 Any pipeline model can define runtime variables. { \"variables\" : { \"format\" : \"+%s\" }, \"name\" : \"Print_date_with_params\" , \"command\" : \"date\" , \"args\" : [ \"+${format}\" ] } This pipeline defines one input variable named format which is a string \"+%s\" .","title":"Variables"},{"location":"pipelines/model/variables/#pipeline-variables","text":"Any pipeline model can define runtime variables. { \"variables\" : { \"format\" : \"+%s\" }, \"name\" : \"Print_date_with_params\" , \"command\" : \"date\" , \"args\" : [ \"+${format}\" ] } This pipeline defines one input variable named format which is a string \"+%s\" .","title":"Pipeline variables"},{"location":"pipelines/model/step/","text":"The step model \u00b6 Steps are directions for the agent to do a specific action. Example { \"name\" : \"Print_date\" , \"command\" : \"date\" } Properties Property Type Summary name string The name of the step parameters ParameterModel[] Optional pipeline parameters variables JsonObject Optional pipeline variables * * Other properties specific to the step's type TypeScript interface interface Job { readonly name : string ; readonly steps : readonly Step []; readonly parameters ? : ParameterModel [] | undefined ; readonly variables ? : ReadonlyJsonObject | undefined ; } We have the following step types: Command defines a command to execute Git defines a git operation File defines a file operation JSON defines an operation with JSON format CSV defines an operation with CSV format Assert defines an assertion Concat defines a concat operation Variable defines an variable assign operation","title":"Getting started with steps"},{"location":"pipelines/model/step/#the-step-model","text":"Steps are directions for the agent to do a specific action. Example { \"name\" : \"Print_date\" , \"command\" : \"date\" } Properties Property Type Summary name string The name of the step parameters ParameterModel[] Optional pipeline parameters variables JsonObject Optional pipeline variables * * Other properties specific to the step's type TypeScript interface interface Job { readonly name : string ; readonly steps : readonly Step []; readonly parameters ? : ParameterModel [] | undefined ; readonly variables ? : ReadonlyJsonObject | undefined ; } We have the following step types: Command defines a command to execute Git defines a git operation File defines a file operation JSON defines an operation with JSON format CSV defines an operation with CSV format Assert defines an assertion Concat defines a concat operation Variable defines an variable assign operation","title":"The step model"},{"location":"pipelines/model/step/assert/","text":"The Assert Step model \u00b6 Assert defines operation to check if two values are equal. The step will fail if these values do not match. Example { \"name\" : \"Check_value\" , \"assert\" : \"${something}\" \"equals\" : \"FooBar\" } Properties Property Type Summary name string The name of the job assert JsonAny The value to check against equals JsonAny The value to check for output string Optional variable name to save the result as boolean. This will always be true or not defined. parameters ParameterModel[] Optional pipeline parameters variables JsonObject Optional pipeline variables","title":"Assert"},{"location":"pipelines/model/step/assert/#the-assert-step-model","text":"Assert defines operation to check if two values are equal. The step will fail if these values do not match. Example { \"name\" : \"Check_value\" , \"assert\" : \"${something}\" \"equals\" : \"FooBar\" } Properties Property Type Summary name string The name of the job assert JsonAny The value to check against equals JsonAny The value to check for output string Optional variable name to save the result as boolean. This will always be true or not defined. parameters ParameterModel[] Optional pipeline parameters variables JsonObject Optional pipeline variables","title":"The Assert Step model"},{"location":"pipelines/model/step/command/","text":"The Command Step model \u00b6 Command defines a command to be executed on the system where the agent runs. Execute a command \u00b6 This step executes a command date on the system. Example { \"name\" : \"Print_date\" , \"command\" : \"date\" } Properties Property Type Summary name string The name of the step command string The command's name to execute Execute a command and save results \u00b6 This step executes a command date on the system and saves results as dateString variable. Example { \"name\" : \"Get_date\" , \"command\" : \"date\" , \"output\" : \"dateString\" } Properties Property Type Summary name string The name of the step command string The command's name to execute output string Optional output variable name Execute a command with argument and save results \u00b6 This step executes a command date +%s on the system and saves results as timestampString variable. Example { \"name\" : \"Get_timestamp\" , \"command\" : \"date\" , \"args\" : [ \"+%s\" ] \"output\" : \"timestampString\" } Properties Property Type Summary name string The name of the step command string The command's name to execute args string[] Optional list of command's arguments output string Optional output variable name","title":"Command"},{"location":"pipelines/model/step/command/#the-command-step-model","text":"Command defines a command to be executed on the system where the agent runs.","title":"The Command Step model"},{"location":"pipelines/model/step/command/#execute-a-command","text":"This step executes a command date on the system. Example { \"name\" : \"Print_date\" , \"command\" : \"date\" } Properties Property Type Summary name string The name of the step command string The command's name to execute","title":"Execute a command"},{"location":"pipelines/model/step/command/#execute-a-command-and-save-results","text":"This step executes a command date on the system and saves results as dateString variable. Example { \"name\" : \"Get_date\" , \"command\" : \"date\" , \"output\" : \"dateString\" } Properties Property Type Summary name string The name of the step command string The command's name to execute output string Optional output variable name","title":"Execute a command and save results"},{"location":"pipelines/model/step/command/#execute-a-command-with-argument-and-save-results","text":"This step executes a command date +%s on the system and saves results as timestampString variable. Example { \"name\" : \"Get_timestamp\" , \"command\" : \"date\" , \"args\" : [ \"+%s\" ] \"output\" : \"timestampString\" } Properties Property Type Summary name string The name of the step command string The command's name to execute args string[] Optional list of command's arguments output string Optional output variable name","title":"Execute a command with argument and save results"},{"location":"pipelines/model/step/concat/","text":"The Concat Step model \u00b6 Concat defines an operation to join multiple values as one. Join arrays { \"name\" : \"Create_MyList\" , \"concat\" : [ \"${otherList}\" , [ { \"name\" : \"MyNewItem\" } ] ], \"output\" : \"MyList\" } The result will be saved as MyList variable: [ { \"name\" : \"ItemFromOtherList\" }, { \"name\" : \"MyNewItem\" } ] Merge objects { \"name\" : \"Create_MyObject\" , \"concat\" : [ { \"name\" : \"MyNewItem\" }, { \"content\" : \"MyContent\" }, \"${myObject}\" ] ], \"output\" : \"MyObject\" } The result will be saved as MyObject variable: { \"name\" : \"MyNewItem\" \"content\" : \"MyContent\" , \"some\" : \"propertyFromMyObject\" } Join strings { \"name\" : \"Create_MyObject\" , \"concat\" : [ \"MyNewItem \" , \"MyContent \" , \"${myString}\" ] ], \"output\" : \"MyString\" } The result will be saved as MyString variable: \"MyNewItem MyContent SomethingFromMyString\" Properties Property Type Summary name string The name of the job concat JsonAny Any JSON value output string The variable name to save the result parameters ParameterModel[] Optional pipeline parameters variables JsonObject Optional pipeline variables","title":"Concat"},{"location":"pipelines/model/step/concat/#the-concat-step-model","text":"Concat defines an operation to join multiple values as one. Join arrays { \"name\" : \"Create_MyList\" , \"concat\" : [ \"${otherList}\" , [ { \"name\" : \"MyNewItem\" } ] ], \"output\" : \"MyList\" } The result will be saved as MyList variable: [ { \"name\" : \"ItemFromOtherList\" }, { \"name\" : \"MyNewItem\" } ] Merge objects { \"name\" : \"Create_MyObject\" , \"concat\" : [ { \"name\" : \"MyNewItem\" }, { \"content\" : \"MyContent\" }, \"${myObject}\" ] ], \"output\" : \"MyObject\" } The result will be saved as MyObject variable: { \"name\" : \"MyNewItem\" \"content\" : \"MyContent\" , \"some\" : \"propertyFromMyObject\" } Join strings { \"name\" : \"Create_MyObject\" , \"concat\" : [ \"MyNewItem \" , \"MyContent \" , \"${myString}\" ] ], \"output\" : \"MyString\" } The result will be saved as MyString variable: \"MyNewItem MyContent SomethingFromMyString\" Properties Property Type Summary name string The name of the job concat JsonAny Any JSON value output string The variable name to save the result parameters ParameterModel[] Optional pipeline parameters variables JsonObject Optional pipeline variables","title":"The Concat Step model"},{"location":"pipelines/model/step/csv/","text":"The CSV Step model \u00b6 CSV defines operation to parse or stringify CSV values. Stringify as CSV { \"name\" : \"Stringify_csv\" , \"csv\" : [ [ \"foo1\" , \"bar1\" ], [ \"foo2\" , \"bar2\" ], [ \"foo,2\" , \"bar,2\" ], [ \"\\\"foo\\\",2\" , \"bar,2\" ] ], \"action\" : \"stringify\" , \"output\" : \"csvString\" } Parse CSV { \"name\" : \"Parse_csv\" , \"csv\" : \"${csvString}\" , \"action\" : \"parse\" , \"output\" : \"csvList\" } Properties Property Type Summary name string The name of the job csv JsonAny The value to perform an action action JsonAny Action to do output string Optional variable name to save the result parameters ParameterModel[] Optional pipeline parameters variables JsonObject Optional pipeline variables","title":"Csv"},{"location":"pipelines/model/step/csv/#the-csv-step-model","text":"CSV defines operation to parse or stringify CSV values. Stringify as CSV { \"name\" : \"Stringify_csv\" , \"csv\" : [ [ \"foo1\" , \"bar1\" ], [ \"foo2\" , \"bar2\" ], [ \"foo,2\" , \"bar,2\" ], [ \"\\\"foo\\\",2\" , \"bar,2\" ] ], \"action\" : \"stringify\" , \"output\" : \"csvString\" } Parse CSV { \"name\" : \"Parse_csv\" , \"csv\" : \"${csvString}\" , \"action\" : \"parse\" , \"output\" : \"csvList\" } Properties Property Type Summary name string The name of the job csv JsonAny The value to perform an action action JsonAny Action to do output string Optional variable name to save the result parameters ParameterModel[] Optional pipeline parameters variables JsonObject Optional pipeline variables","title":"The CSV Step model"},{"location":"pipelines/model/step/file/","text":"The File Step model \u00b6 File defines operations on the File system. Create a temporary directory \u00b6 This step creates a temporary directory. It will be removed after the pipeline has stopped running. Example { \"name\" : \"Prepare_temp_dir\" , \"file\" : \"mkdir\" , \"output\" : \"tempDir\" } Properties Property Type Summary name string The name of the step file JsonAny The action to execute output string Variable name to save the file name Create a specific directory \u00b6 This step creates a directory to the target location. Example { \"name\" : \"Prepare_dir\" , \"file\" : \"mkdir\" , \"target\" : \"${tempDir}/myPath\" } Properties Property Type Summary name string The name of the step file JsonAny The action to execute target string The target directory to create output string Optional variable name to save the directory name Read file to string \u00b6 This step will read file from the target location to a variable as string (using UTF-8 encoding). Example { \"name\" : \"Read_file\" , \"file\" : \"read\" , \"target\" : \"${tempDir}/myPath.txt\" , \"output\" : \"fileContents\" } Properties Property Type Summary name string The name of the step file JsonAny The action to execute target string The target file to read output string Variable name to save the file contents Read or create a file on the File system \u00b6 This step will read a file from the target location to a variable as string (using UTF-8 encoding) if it exists. Otherwise, it will create it. Example { \"name\" : \"Read_or_create_file\" , \"file\" : \"read/create\" , \"target\" : \"${tempDir}/myPath.txt\" , \"default\" : \"[]\" , \"output\" : \"itemsJsonString\" } Properties Property Type Summary name string The name of the step file JsonAny The action to execute target string The target file to read default string The content of the file if it does not exist output string Variable name to save the file contents Write file as string \u00b6 This step will write the content property as a string to a file on the target location (using UTF-8 encoding). Example { \"name\" : \"Write_file\" , \"file\" : \"write\" , \"target\" : \"${tempDir}/myPath.txt\" , \"content\" : \"Hello world\\n\" , \"output\" : \"myFileName\" } Properties Property Type Summary name string The name of the step file JsonAny The action to execute target string The target file to write to content string The file contents as a string output string Variable name to save the file target name Write file as JSON \u00b6 This step will write the content property to a file on the target location (using JSON and UTF-8 encoding). Example { \"name\" : \"Write_file\" , \"file\" : \"write\" , \"target\" : \"${tempDir}/myPath.txt\" , \"content\" : { \"hello\" : \"world\" }, \"output\" : \"myFileName\" } Properties Property Type Summary name string The name of the step file JsonAny The action to execute target string The target file to write to content JsonAny The file contents as a any JSON compatible value (except string) output string Variable name to save the file target name","title":"File"},{"location":"pipelines/model/step/file/#the-file-step-model","text":"File defines operations on the File system.","title":"The File Step model"},{"location":"pipelines/model/step/file/#create-a-temporary-directory","text":"This step creates a temporary directory. It will be removed after the pipeline has stopped running. Example { \"name\" : \"Prepare_temp_dir\" , \"file\" : \"mkdir\" , \"output\" : \"tempDir\" } Properties Property Type Summary name string The name of the step file JsonAny The action to execute output string Variable name to save the file name","title":"Create a temporary directory"},{"location":"pipelines/model/step/file/#create-a-specific-directory","text":"This step creates a directory to the target location. Example { \"name\" : \"Prepare_dir\" , \"file\" : \"mkdir\" , \"target\" : \"${tempDir}/myPath\" } Properties Property Type Summary name string The name of the step file JsonAny The action to execute target string The target directory to create output string Optional variable name to save the directory name","title":"Create a specific directory"},{"location":"pipelines/model/step/file/#read-file-to-string","text":"This step will read file from the target location to a variable as string (using UTF-8 encoding). Example { \"name\" : \"Read_file\" , \"file\" : \"read\" , \"target\" : \"${tempDir}/myPath.txt\" , \"output\" : \"fileContents\" } Properties Property Type Summary name string The name of the step file JsonAny The action to execute target string The target file to read output string Variable name to save the file contents","title":"Read file to string"},{"location":"pipelines/model/step/file/#read-or-create-a-file-on-the-file-system","text":"This step will read a file from the target location to a variable as string (using UTF-8 encoding) if it exists. Otherwise, it will create it. Example { \"name\" : \"Read_or_create_file\" , \"file\" : \"read/create\" , \"target\" : \"${tempDir}/myPath.txt\" , \"default\" : \"[]\" , \"output\" : \"itemsJsonString\" } Properties Property Type Summary name string The name of the step file JsonAny The action to execute target string The target file to read default string The content of the file if it does not exist output string Variable name to save the file contents","title":"Read or create a file on the File system"},{"location":"pipelines/model/step/file/#write-file-as-string","text":"This step will write the content property as a string to a file on the target location (using UTF-8 encoding). Example { \"name\" : \"Write_file\" , \"file\" : \"write\" , \"target\" : \"${tempDir}/myPath.txt\" , \"content\" : \"Hello world\\n\" , \"output\" : \"myFileName\" } Properties Property Type Summary name string The name of the step file JsonAny The action to execute target string The target file to write to content string The file contents as a string output string Variable name to save the file target name","title":"Write file as string"},{"location":"pipelines/model/step/file/#write-file-as-json","text":"This step will write the content property to a file on the target location (using JSON and UTF-8 encoding). Example { \"name\" : \"Write_file\" , \"file\" : \"write\" , \"target\" : \"${tempDir}/myPath.txt\" , \"content\" : { \"hello\" : \"world\" }, \"output\" : \"myFileName\" } Properties Property Type Summary name string The name of the step file JsonAny The action to execute target string The target file to write to content JsonAny The file contents as a any JSON compatible value (except string) output string Variable name to save the file target name","title":"Write file as JSON"},{"location":"pipelines/model/step/git/","text":"The Git Step model \u00b6 Git defines operations on the git repository. Note! The git command is required on the system. Clone a repository \u00b6 This step clones a repository by running a command git clone URL [TARGET] . Example { \"name\" : \"Prepare_git\" , \"git\" : \"clone\" , \"url\" : \"git@github.com:sendanor/ts.git\" , \"target\" : \"${gitDir}\" } Properties Property Type Summary name string The name of the step git string The action to execute url string The git repository to clone (may be a file, too) target string Optional target location to clone into. Defaults to the repository name. Add a file in repository \u00b6 This step runs git add TARGET , optionally changing the working directory to cwd . Example { \"name\" : \"Add_to_git\" , \"git\" : \"add\" , \"target\" : \"${commentFile}\" , \"cwd\" : \"${gitDir}\" } Properties Property Type Summary name string The name of the step git string The action to execute target string The git file or directory to add to be commited. Defaults to . , eg. current directory. cwd string Optional directory to change the working directory Pull changes from remote repository \u00b6 This step runs git pull [TARGET] , optionally changing the working directory to cwd . Example { \"name\" : \"Pull_changes\" , \"git\" : \"pull\" , \"cwd\" : \"${gitDir}\" } Properties Property Type Summary name string The name of the step git string The action to execute target string Optional git url or directory where to push new commits. Defaults to origin. cwd string Optional directory to change the working directory. Defaults to the current directory. Push changes to remote repository \u00b6 This step runs git push [TARGET] , optionally changing the working directory to cwd . Example { \"name\" : \"Push_to_git\" , \"git\" : \"push\" , \"cwd\" : \"${gitDir}\" } Properties Property Type Summary name string The name of the step git string The action to execute target string Optional git url or directory where to push new commits. Defaults to origin. cwd string Optional directory to change the working directory. Defaults to the current directory. Set repository configurations \u00b6 This step runs git config [SET [VALUE]] , optionally changing the working directory to cwd . Example { \"name\" : \"Set_git_email\" , \"git\" : \"config\" , \"set\" : \"user.email\" , \"value\" : \"agent@exmaple.com\" , \"cwd\" : \"${gitDir}\" } Properties Property Type Summary name string The name of the step git string The action to execute set string The property name to set value string The property value to set cwd string Optional directory to change the working directory. Defaults to the current directory. Commit changes \u00b6 This step runs git commit [-m MESSAGE] , optionally changing the working directory to cwd . Example { \"name\" : \"Commit_git\" , \"git\" : \"commit\" , \"message\" : \"Pipeline changed files\" , \"cwd\" : \"${gitDir}\" } Properties Property Type Summary name string The name of the step git string The action to execute message string The optional commit message. Defaults to Pipeline commit . cwd string Optional directory to change the working directory. Defaults to the current directory.","title":"Git"},{"location":"pipelines/model/step/git/#the-git-step-model","text":"Git defines operations on the git repository. Note! The git command is required on the system.","title":"The Git Step model"},{"location":"pipelines/model/step/git/#clone-a-repository","text":"This step clones a repository by running a command git clone URL [TARGET] . Example { \"name\" : \"Prepare_git\" , \"git\" : \"clone\" , \"url\" : \"git@github.com:sendanor/ts.git\" , \"target\" : \"${gitDir}\" } Properties Property Type Summary name string The name of the step git string The action to execute url string The git repository to clone (may be a file, too) target string Optional target location to clone into. Defaults to the repository name.","title":"Clone a repository"},{"location":"pipelines/model/step/git/#add-a-file-in-repository","text":"This step runs git add TARGET , optionally changing the working directory to cwd . Example { \"name\" : \"Add_to_git\" , \"git\" : \"add\" , \"target\" : \"${commentFile}\" , \"cwd\" : \"${gitDir}\" } Properties Property Type Summary name string The name of the step git string The action to execute target string The git file or directory to add to be commited. Defaults to . , eg. current directory. cwd string Optional directory to change the working directory","title":"Add a file in repository"},{"location":"pipelines/model/step/git/#pull-changes-from-remote-repository","text":"This step runs git pull [TARGET] , optionally changing the working directory to cwd . Example { \"name\" : \"Pull_changes\" , \"git\" : \"pull\" , \"cwd\" : \"${gitDir}\" } Properties Property Type Summary name string The name of the step git string The action to execute target string Optional git url or directory where to push new commits. Defaults to origin. cwd string Optional directory to change the working directory. Defaults to the current directory.","title":"Pull changes from remote repository"},{"location":"pipelines/model/step/git/#push-changes-to-remote-repository","text":"This step runs git push [TARGET] , optionally changing the working directory to cwd . Example { \"name\" : \"Push_to_git\" , \"git\" : \"push\" , \"cwd\" : \"${gitDir}\" } Properties Property Type Summary name string The name of the step git string The action to execute target string Optional git url or directory where to push new commits. Defaults to origin. cwd string Optional directory to change the working directory. Defaults to the current directory.","title":"Push changes to remote repository"},{"location":"pipelines/model/step/git/#set-repository-configurations","text":"This step runs git config [SET [VALUE]] , optionally changing the working directory to cwd . Example { \"name\" : \"Set_git_email\" , \"git\" : \"config\" , \"set\" : \"user.email\" , \"value\" : \"agent@exmaple.com\" , \"cwd\" : \"${gitDir}\" } Properties Property Type Summary name string The name of the step git string The action to execute set string The property name to set value string The property value to set cwd string Optional directory to change the working directory. Defaults to the current directory.","title":"Set repository configurations"},{"location":"pipelines/model/step/git/#commit-changes","text":"This step runs git commit [-m MESSAGE] , optionally changing the working directory to cwd . Example { \"name\" : \"Commit_git\" , \"git\" : \"commit\" , \"message\" : \"Pipeline changed files\" , \"cwd\" : \"${gitDir}\" } Properties Property Type Summary name string The name of the step git string The action to execute message string The optional commit message. Defaults to Pipeline commit . cwd string Optional directory to change the working directory. Defaults to the current directory.","title":"Commit changes"},{"location":"pipelines/model/step/json/","text":"The JSON Step model \u00b6 JSON defines operation to parse or stringify values as JSON. Stringify as JSON { \"name\" : \"Stringify_json\" , \"json\" : { \"foo\" : \"bar\" }, \"action\" : \"stringify\" , \"output\" : \"jsonString\" } The value will be stringified as \"{\\\"foo\\\":\\\"bar\\\"}\" and saved to variable jsonString . Parse JSON { \"name\" : \"Parse_json\" , \"json\" : \"{\\\"foo\\\":\\\"bar\\\"}\" , \"action\" : \"parse\" , \"output\" : \"jsonObject\" } The value will be parsed as {\"foo\":\"bar\"} and saved to variable jsonObject . Properties Property Type Summary name string The name of the job json JsonAny The value to perform an action action JsonAny Action to do output string Optional variable name to save the result parameters ParameterModel[] Optional pipeline parameters variables JsonObject Optional pipeline variables","title":"Json"},{"location":"pipelines/model/step/json/#the-json-step-model","text":"JSON defines operation to parse or stringify values as JSON. Stringify as JSON { \"name\" : \"Stringify_json\" , \"json\" : { \"foo\" : \"bar\" }, \"action\" : \"stringify\" , \"output\" : \"jsonString\" } The value will be stringified as \"{\\\"foo\\\":\\\"bar\\\"}\" and saved to variable jsonString . Parse JSON { \"name\" : \"Parse_json\" , \"json\" : \"{\\\"foo\\\":\\\"bar\\\"}\" , \"action\" : \"parse\" , \"output\" : \"jsonObject\" } The value will be parsed as {\"foo\":\"bar\"} and saved to variable jsonObject . Properties Property Type Summary name string The name of the job json JsonAny The value to perform an action action JsonAny Action to do output string Optional variable name to save the result parameters ParameterModel[] Optional pipeline parameters variables JsonObject Optional pipeline variables","title":"The JSON Step model"},{"location":"pipelines/model/step/variable/","text":"The Variable Step model \u00b6 Variable defines an operation to set a named variable. Set a variable The value gitDir will be set as TEMP_DIR/git : { \"name\" : \"Set_variable\" , \"variable\" : \"gitDir\" , \"set\" : \"${tempDir}/git\" } Properties Property Type Summary name string The name of the job variable string The name of the variable to set set JsonAny The new value to the variable parameters ParameterModel[] Optional pipeline parameters variables JsonObject Optional pipeline variables","title":"Variable"},{"location":"pipelines/model/step/variable/#the-variable-step-model","text":"Variable defines an operation to set a named variable. Set a variable The value gitDir will be set as TEMP_DIR/git : { \"name\" : \"Set_variable\" , \"variable\" : \"gitDir\" , \"set\" : \"${tempDir}/git\" } Properties Property Type Summary name string The name of the job variable string The name of the variable to set set JsonAny The new value to the variable parameters ParameterModel[] Optional pipeline parameters variables JsonObject Optional pipeline variables","title":"The Variable Step model"},{"location":"pipelines/runner/","text":"Pipeline Runner software \u00b6 Our Pipeline Runner software is available and documented at Github . As our commercial customer, we can set up everything related to agents and pipelines for you.","title":"Pipeline Runner"},{"location":"pipelines/runner/#pipeline-runner-software","text":"Our Pipeline Runner software is available and documented at Github . As our commercial customer, we can set up everything related to agents and pipelines for you.","title":"Pipeline Runner software"}]}